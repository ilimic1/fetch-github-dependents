{"version":3,"sources":["../src/cli.ts","../package.json","../src/index.ts"],"sourcesContent":["#!/bin/env node\n\nimport { Command, InvalidArgumentError, Option } from \"commander\";\nimport { trimEnd } from \"lodash-es\";\nimport { version } from \"../package.json\";\nimport { getRepos, githubRepoSlugRegex, githubUserSlugRegex } from \"./index.js\";\n\nconst program = new Command();\n\nprogram\n  .name(\"github-dependents\")\n  .description(\"CLI to fetch GitHub dependents and sort by stars.\")\n  .version(version);\n\nprogram\n  .command(\"fetch\", { isDefault: true })\n  .description(\"Fetch dependents from GitHub\")\n  .argument(\n    \"<repo>\",\n    \"repo url, eg. https://github.com/ilimic1/github-dependents\",\n    (value) => {\n      const urlRegex =\n        /^(?:https?\\:\\/\\/)github.com\\/[A-Za-z0-9-]+\\/[A-Za-z0-9-]+\\/?/i;\n\n      if (urlRegex.test(value)) {\n        return trimEnd(value, \"/\");\n      }\n\n      const [user, repo] = value.split(\"/\");\n\n      if (githubUserSlugRegex.test(user) && githubRepoSlugRegex.test(repo)) {\n        return `https://github.com/${value}`;\n      }\n\n      throw new InvalidArgumentError(\n        \"Repo must be a valid HTTP GitHub repo URL or a user/repo string.\"\n      );\n    }\n  )\n  .option(\n    \"-m, --max <count>\",\n    \"maximum number of repos to scan/return, eg. 300\",\n    (value) => {\n      const parsedValue = parseInt(value, 10);\n      if (isNaN(parsedValue)) {\n        throw new InvalidArgumentError(\"Count must be a number.\");\n      }\n      return parsedValue;\n    }\n  )\n  .addOption(\n    new Option(\"-s, --sort <direction>\", \"optionally sort by stars\")\n      .choices([\"asc\", \"desc\"])\n      .default(\"desc\")\n  )\n  .option(\"--no-sort\", \"disable default sorting by stars\")\n  .action(async (repo, options) => {\n    console.log(`Fetching dependents for ${repo} ...`);\n\n    const max = options.max ? parseInt(options.max) : undefined;\n\n    let sort: undefined | \"asc\" | \"desc\";\n\n    if (options.sort === \"desc\") {\n      sort = \"desc\";\n    } else if (options.sort === \"asc\") {\n      sort = \"asc\";\n    } else {\n      // if --no-sort is passed sort will be false\n      sort = undefined;\n    }\n\n    const { repos } = await getRepos(`${repo}/network/dependents`, max, sort);\n\n    repos.forEach((repo) => {\n      console.log(`${repo.getUrl()} ${repo.stars}`);\n    });\n  });\n\nprogram.parse();\n","{\n  \"name\": \"@ilimic/fetch-github-dependents\",\n  \"version\": \"1.0.0-alpha.7\",\n  \"description\": \"Get Github project dependents and sort them by stars.\",\n  \"homepage\": \"https://github.com/ilimic1/fetch-github-dependents\",\n  \"type\": \"module\",\n  \"licenses\": [\n    {\n      \"license\": \"MIT\"\n    }\n  ],\n  \"bin\": \"bin/fetch-github-dependents.js\",\n  \"scripts\": {\n    \"build\": \"tsup-node\",\n    \"prepublish\": \"npm run build\",\n    \"test\": \"vitest run\",\n    \"watch\": \"tsup-node --watch\"\n  },\n  \"author\": \"Ivo LimiÄ‡ <ilimic1@gmail.com>\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@types/lodash-es\": \"^4.17.12\",\n    \"tsup\": \"^8.0.1\",\n    \"vitest\": \"^1.1.0\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.6.2\",\n    \"cheerio\": \"^1.0.0-rc.12\",\n    \"commander\": \"^11.1.0\",\n    \"lodash-es\": \"^4.17.21\"\n  },\n  \"files\": [\n    \"dist\"\n  ]\n}\n","import axios from \"axios\";\nimport { load } from \"cheerio\";\n\nclass Repo {\n  constructor(\n    public readonly user: string,\n    public readonly repo: string,\n    public readonly stars: number\n  ) {}\n\n  public getUrl() {\n    return `https://github.com/${this.user}/${this.repo}`;\n  }\n}\n\nexport const githubUserSlugRegex = /^[A-Za-z0-9-]+$/i;\nexport const githubRepoSlugRegex = /^[A-Za-z0-9-_\\.]+$/;\n\nasync function getData(\n  url: string,\n  reposToScan?: number\n): Promise<{ repos: Repo[]; count: number }> {\n  const repos: Repo[] = [];\n  let repoCount: number = undefined;\n  let delay = 0;\n\n  do {\n    await new Promise((resolve) => setTimeout(resolve, delay));\n    delay = 0;\n\n    let data: string;\n\n    try {\n      const request = await axios.get(url);\n      data = await request.data;\n    } catch (error) {\n      if (error.response && error.response.status === 429) {\n        // if we get HTTP 429 Too Many Requests we should sleep for a while\n        console.log(\"error.response.status\", error.response.status);\n        console.log(\"error.response.headers\", error.response.headers);\n\n        if (\n          error.response.headers[\"retry-after\"] &&\n          /^[0-9]+$/.test(error.response.headers[\"retry-after\"])\n        ) {\n          delay = Number(error.response.headers[\"retry-after\"]) * 1000;\n        } else {\n          // default to 5 minutes\n          delay = 5 * 60 * 1000;\n        }\n\n        console.log(\n          `Got HTTP 429 Too Many Requests, sleeping for ${\n            delay / 1000\n          } seconds...`\n        );\n\n        continue;\n      }\n\n      console.log(\"error.message\", error.message);\n      return { repos, count: repoCount };\n    }\n\n    const $ = load(data);\n\n    if (repoCount === undefined) {\n      // string that we get is something like \" 1,334,607 Repositories \"\n      repoCount = Number(\n        $(\"svg.octicon-code-square\")\n          .parent()\n          .text()\n          .replace(/[^0-9]/g, \"\")\n      );\n    }\n\n    const rows = $('[data-test-id=\"dg-repo-pkg-dependent\"]');\n\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      const user = $(row)\n        .find(\n          'a[data-hovercard-type=\"user\"],a[data-hovercard-type=\"organization\"]'\n        )\n        .eq(0)\n        .text();\n      const repo = $(row)\n        .find('a[data-hovercard-type=\"repository\"]')\n        .eq(0)\n        .text();\n      const stars = $(row).find(\"svg.octicon-star\").parent().text();\n\n      if (user === \"\" || repo === \"\") {\n        console.error(\n          `Failed to get user and/or repo for repo ${user}/${repo}.`\n        );\n      }\n\n      repos.push(new Repo(user, repo, Number(stars)));\n\n      if (reposToScan !== undefined && repos.length >= reposToScan) {\n        console.log(`Went through ${repos.length}/${repoCount} repos...`);\n        return { repos, count: repoCount };\n      }\n    }\n\n    const nextLink = $(\n      '.paginate-container .btn.BtnGroup-item:contains(\"Next\")'\n    ).eq(0);\n\n    url = nextLink.length ? nextLink.attr(\"href\") : null;\n    console.log(`Went through ${repos.length}/${repoCount} repos...`);\n  } while (url);\n\n  return { repos, count: repoCount };\n}\n\nexport async function getRepos(\n  url: string,\n  reposToScan: number = undefined,\n  sort: undefined | \"asc\" | \"desc\"\n): Promise<{ repos: Repo[]; count: number }> {\n  const { repos, count } = await getData(url, reposToScan);\n\n  // todo: sort by name as tie braker\n  if (sort === \"desc\") {\n    repos.sort((a, b) => b.stars - a.stars);\n  } else if (sort === \"asc\") {\n    repos.sort((a, b) => a.stars - b.stars);\n  }\n\n  return { repos, count };\n}\n"],"mappings":"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","names":["Command","InvalidArgumentError","Option","trimEnd","version","axios","load","Repo","user","repo","stars","githubUserSlugRegex","githubRepoSlugRegex","getData","url","reposToScan","repos","repoCount","delay","resolve","data","error","$","rows","i","row","nextLink","getRepos","sort","count","b","program","Command","version","value","trimEnd","user","repo","githubUserSlugRegex","githubRepoSlugRegex","InvalidArgumentError","parsedValue","Option","options","max","sort","repos","getRepos"]}