{"version":3,"sources":["../src/cli.ts","../src/index.ts"],"sourcesContent":["#!/bin/env node\n\nimport { Command, InvalidArgumentError, Option } from \"commander\";\nimport { trimEnd } from \"lodash-es\";\nimport { getRepos } from \"./index.js\";\n\nconst program = new Command();\n\nprogram\n  .name(\"github-dependents\")\n  .description(\"CLI to fetch GitHub dependents and sort by stars.\")\n  .version(\"1.0.0-alpha.3\");\n\nprogram\n  .command(\"fetch\", { isDefault: true })\n  .description(\"Fetch dependents from GitHub\")\n  .argument(\n    \"<repo>\",\n    \"repo url, eg. https://github.com/ilimic1/github-dependents\",\n    (value) => {\n      const urlRegex =\n        /^(?:https?\\:\\/\\/)github.com\\/[A-Za-z0-9-]+\\/[A-Za-z0-9-]+\\/?/i;\n\n      const userRepoRegex = /^[A-Za-z0-9-]+\\/[A-Za-z0-9-]+$/i;\n\n      if (urlRegex.test(value)) {\n        return trimEnd(value, \"/\");\n      }\n\n      if (userRepoRegex.test(value)) {\n        return `https://github.com/${value}`;\n      }\n\n      throw new InvalidArgumentError(\n        \"Repo must be a valid HTTP GitHub repo URL or a user/repo string.\"\n      );\n    }\n  )\n  .option(\n    \"-m, --max <count>\",\n    \"maximum number of repos to scan/return, eg. 300\",\n    (value) => {\n      const parsedValue = parseInt(value, 10);\n      if (isNaN(parsedValue)) {\n        throw new InvalidArgumentError(\"Count must be a number.\");\n      }\n      return parsedValue;\n    }\n  )\n  .addOption(\n    new Option(\"-s, --sort <direction>\", \"optionally sort by stars\")\n      .choices([\"asc\", \"desc\"])\n      .default(\"desc\")\n  )\n  .option(\"--no-sort\", \"disable default sorting by stars\")\n  .action(async (repo, options) => {\n    console.log(repo, options);\n\n    const max = options.max ? parseInt(options.max) : undefined;\n\n    let sort: undefined | \"asc\" | \"desc\";\n\n    if (options.sort === \"desc\") {\n      sort = \"desc\";\n    } else if (options.sort === \"asc\") {\n      sort = \"asc\";\n    } else {\n      // if --no-sort is passed sort will be false\n      sort = undefined;\n    }\n\n    const repos = await getRepos(`${repo}/network/dependents`, max, sort);\n\n    repos.forEach((repo) => {\n      console.log(`${repo.getUrl()} ${repo.stars}`);\n    });\n  });\n\nprogram.parse();\n","import axios from \"axios\";\nimport { load } from \"cheerio\";\n\nclass Repo {\n  constructor(\n    public readonly user: string,\n    public readonly repo: string,\n    public readonly stars: number\n  ) {}\n\n  public getUrl() {\n    return `https://github.com/${this.user}/${this.repo}`;\n  }\n}\n\nasync function getRepos_(url: string, reposToScan?: number): Promise<Repo[]> {\n  const repos: Repo[] = [];\n  let repoCount: number = undefined;\n\n  do {\n    let data: string;\n\n    try {\n      const request = await axios.get(url, {});\n      data = await request.data;\n    } catch (error) {\n      if (error.response) {\n        console.log(\"Error response status\", error.response.status);\n      }\n      console.log(\"Error\", error.message);\n      return repos;\n    }\n\n    const $ = load(data);\n\n    if (repoCount === undefined) {\n      // string that we get is something like \" 1,334,607 Repositories \"\n      repoCount = Number(\n        $(\"svg.octicon-code-square\")\n          .parent()\n          .text()\n          .replace(/[^0-9]/g, \"\")\n      );\n    }\n\n    const rows = $('[data-test-id=\"dg-repo-pkg-dependent\"]');\n\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      const user = $(row)\n        .find(\n          'a[data-hovercard-type=\"user\"],a[data-hovercard-type=\"organization\"]'\n        )\n        .eq(0)\n        .text();\n      const repo = $(row)\n        .find('a[data-hovercard-type=\"repository\"]')\n        .eq(0)\n        .text();\n      const stars = $(row).find(\"svg.octicon-star\").parent().text();\n\n      if (user === \"\" || repo === \"\") {\n        console.error(\n          `Failed to get user and/or repo for repo ${user}/${repo}.`\n        );\n      }\n\n      repos.push(new Repo(user, repo, Number(stars)));\n\n      if (reposToScan !== undefined && repos.length >= reposToScan) {\n        console.log(`Went through ${repos.length}/${repoCount} repos...`);\n        return repos;\n      }\n    }\n\n    const nextLink = $(\n      '.paginate-container .btn.BtnGroup-item:contains(\"Next\")'\n    ).eq(0);\n    url = nextLink.length ? nextLink.attr(\"href\") : null;\n    console.log(`Went through ${repos.length}/${repoCount} repos...`);\n  } while (url);\n\n  return repos;\n}\n\nexport async function getRepos(\n  url: string,\n  reposToScan: number = undefined,\n  sort: undefined | \"asc\" | \"desc\"\n): Promise<Repo[]> {\n  const repos = await getRepos_(url, reposToScan);\n\n  // todo: sort by name as tie braker\n  if (sort === \"desc\") {\n    repos.sort((a, b) => b.stars - a.stars);\n  } else if (sort === \"asc\") {\n    repos.sort((a, b) => a.stars - b.stars);\n  }\n\n  return repos;\n}\n"],"mappings":"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","names":["Command","InvalidArgumentError","Option","trimEnd","axios","load","Repo","user","repo","stars","getRepos_","url","reposToScan","repos","repoCount","data","error","$","rows","i","row","nextLink","getRepos","sort","b","program","Command","value","urlRegex","userRepoRegex","trimEnd","InvalidArgumentError","parsedValue","Option","repo","options","max","sort","getRepos"]}