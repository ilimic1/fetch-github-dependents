#!/bin/env node
import{Command as G,InvalidArgumentError as x,Option as I}from"commander";import{trimEnd as T}from"lodash-es";var h="1.0.0-alpha.7";import R from"axios";import{load as v}from"cheerio";var p=class{constructor(o,s,e){this.user=o;this.repo=s;this.stars=e}getUrl(){return`https://github.com/${this.user}/${this.repo}`}},f=/^[A-Za-z0-9-]+$/i,b=/^[A-Za-z0-9-_\.]+$/;async function q(t,o){let s=[],e,i=0;do{await new Promise(r=>setTimeout(r,i)),i=0;let a;try{a=await(await R.get(t)).data}catch(r){if(r.response&&r.response.status===429){console.log("error.response.status",r.response.status),console.log("error.response.headers",r.response.headers),r.response.headers["retry-after"]&&/^[0-9]+$/.test(r.response.headers["retry-after"])?i=Number(r.response.headers["retry-after"])*1e3:i=5*60*1e3,console.log(`Got HTTP 429 Too Many Requests, sleeping for ${i/1e3} seconds...`);continue}return console.log("error.message",r.message),{repos:s,count:e}}let n=v(a);e===void 0&&(e=Number(n("svg.octicon-code-square").parent().text().replace(/[^0-9]/g,"")));let g=n('[data-test-id="dg-repo-pkg-dependent"]');for(let r=0;r<g.length;r++){let c=g[r],d=n(c).find('a[data-hovercard-type="user"],a[data-hovercard-type="organization"]').eq(0).text(),u=n(c).find('a[data-hovercard-type="repository"]').eq(0).text(),w=n(c).find("svg.octicon-star").parent().text();if((d===""||u==="")&&console.error(`Failed to get user and/or repo for repo ${d}/${u}.`),s.push(new p(d,u,Number(w))),o!==void 0&&s.length>=o)return console.log(`Went through ${s.length}/${e} repos...`),{repos:s,count:e}}let m=n('.paginate-container .btn.BtnGroup-item:contains("Next")').eq(0);t=m.length?m.attr("href"):null,console.log(`Went through ${s.length}/${e} repos...`)}while(t);return{repos:s,count:e}}async function y(t,o=void 0,s){let{repos:e,count:i}=await q(t,o);return s==="desc"?e.sort((a,n)=>n.stars-a.stars):s==="asc"&&e.sort((a,n)=>a.stars-n.stars),{repos:e,count:i}}var l=new G;l.name("github-dependents").description("CLI to fetch GitHub dependents and sort by stars.").version(h);l.command("fetch",{isDefault:!0}).description("Fetch dependents from GitHub").argument("<repo>","repo url, eg. https://github.com/ilimic1/github-dependents",t=>{if(/^(?:https?\:\/\/)github.com\/[A-Za-z0-9-]+\/[A-Za-z0-9-]+\/?/i.test(t))return T(t,"/");let[s,e]=t.split("/");if(f.test(s)&&b.test(e))return`https://github.com/${t}`;throw new x("Repo must be a valid HTTP GitHub repo URL or a user/repo string.")}).option("-m, --max <count>","maximum number of repos to scan/return, eg. 300",t=>{let o=parseInt(t,10);if(isNaN(o))throw new x("Count must be a number.");return o}).addOption(new I("-s, --sort <direction>","optionally sort by stars").choices(["asc","desc"]).default("desc")).option("--no-sort","disable default sorting by stars").action(async(t,o)=>{console.log(`Fetching dependents for ${t} ...`);let s=o.max?parseInt(o.max):void 0,e;o.sort==="desc"?e="desc":o.sort==="asc"?e="asc":e=void 0;let{repos:i}=await y(`${t}/network/dependents`,s,e);i.forEach(a=>{console.log(`${a.getUrl()} ${a.stars}`)})});l.parse();
//# sourceMappingURL=cli.js.map