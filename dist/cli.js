#!/bin/env node
import{Command as y,InvalidArgumentError as f,Option as $}from"commander";import{trimEnd as R}from"lodash-es";import b from"axios";import{load as w}from"cheerio";var u=class{constructor(t,r,o){this.user=t;this.repo=r;this.stars=o}getUrl(){return`https://github.com/${this.user}/${this.repo}`}};async function x(e,t){let r=[],o;do{let a;try{a=await(await b.get(e,{})).data}catch(n){return n.response&&console.log("Error response status",n.response.status),console.log("Error",n.message),r}let s=w(a);o===void 0&&(o=Number(s("svg.octicon-code-square").parent().text().replace(/[^0-9]/g,"")));let l=s('[data-test-id="dg-repo-pkg-dependent"]');for(let n=0;n<l.length;n++){let i=l[n],c=s(i).find('a[data-hovercard-type="user"],a[data-hovercard-type="organization"]').eq(0).text(),d=s(i).find('a[data-hovercard-type="repository"]').eq(0).text(),h=s(i).find("svg.octicon-star").parent().text();if((c===""||d==="")&&console.error(`Failed to get user and/or repo for repo ${c}/${d}.`),r.push(new u(c,d,Number(h))),t!==void 0&&r.length>=t)return console.log(`Went through ${r.length}/${o} repos...`),r}let g=s('.paginate-container .btn.BtnGroup-item:contains("Next")').eq(0);e=g.length?g.attr("href"):null,console.log(`Went through ${r.length}/${o} repos...`)}while(e);return r}async function m(e,t=void 0,r){let o=await x(e,t);return r==="desc"?o.sort((a,s)=>s.stars-a.stars):r==="asc"&&o.sort((a,s)=>a.stars-s.stars),o}var p=new y;p.name("github-dependents").description("CLI to fetch GitHub dependents and sort by stars.").version("1.0.0-alpha.0");p.command("fetch",{isDefault:!0}).description("Fetch dependents from GitHub").argument("<repo>","repo url, eg. https://github.com/ilimic1/github-dependents",e=>{let t=/^(?:https?\:\/\/)github.com\/[A-Za-z0-9-]+\/[A-Za-z0-9-]+\/?/i,r=/^[A-Za-z0-9-]+\/[A-Za-z0-9-]+$/i;if(t.test(e))return R(e,"/");if(r.test(e))return`https://github.com/${e}`;throw new f("Repo must be a valid HTTP GitHub repo URL or a user/repo string.")}).option("-m, --max <count>","maximum number of repos to scan/return, eg. 300",e=>{let t=parseInt(e,10);if(isNaN(t))throw new f("Count must be a number.");return t}).addOption(new $("-s, --sort <direction>","optionally sort by stars").choices(["asc","desc"]).default("desc")).option("--no-sort","disable default sorting by stars").action(async(e,t)=>{console.log(e,t);let r=t.max?parseInt(t.max):void 0,o;t.sort==="desc"?o="desc":t.sort==="asc"?o="asc":o=void 0,(await m(`${e}/network/dependents`,r,o)).forEach(s=>{console.log(`${s.getUrl()} ${s.stars}`)})});p.parse();
//# sourceMappingURL=cli.js.map