#!/bin/env node
import{Command as v,InvalidArgumentError as f,Option as R}from"commander";import{trimEnd as I}from"lodash-es";var g="1.0.0-alpha.5";import w from"axios";import{load as x}from"cheerio";var p=class{constructor(t,s,r){this.user=t;this.repo=s;this.stars=r}getUrl(){return`https://github.com/${this.user}/${this.repo}`}};async function $(e,t){let s=[],r;do{let i;try{i=await(await w.get(e,{})).data}catch(o){return o.response&&console.log("Error response status",o.response.status),console.log("Error",o.message),s}let n=x(i);r===void 0&&(r=Number(n("svg.octicon-code-square").parent().text().replace(/[^0-9]/g,"")));let l=n('[data-test-id="dg-repo-pkg-dependent"]');for(let o=0;o<l.length;o++){let a=l[o],c=n(a).find('a[data-hovercard-type="user"],a[data-hovercard-type="organization"]').eq(0).text(),d=n(a).find('a[data-hovercard-type="repository"]').eq(0).text(),b=n(a).find("svg.octicon-star").parent().text();if((c===""||d==="")&&console.error(`Failed to get user and/or repo for repo ${c}/${d}.`),s.push(new p(c,d,Number(b))),t!==void 0&&s.length>=t)return console.log(`Went through ${s.length}/${r} repos...`),s}let m=n('.paginate-container .btn.BtnGroup-item:contains("Next")').eq(0);e=m.length?m.attr("href"):null,console.log(`Went through ${s.length}/${r} repos...`)}while(e);return s}async function h(e,t=void 0,s){let r=await $(e,t);return s==="desc"?r.sort((i,n)=>n.stars-i.stars):s==="asc"&&r.sort((i,n)=>i.stars-n.stars),r}var u=new v;u.name("github-dependents").description("CLI to fetch GitHub dependents and sort by stars.").version(g);u.command("fetch",{isDefault:!0}).description("Fetch dependents from GitHub").argument("<repo>","repo url, eg. https://github.com/ilimic1/github-dependents",e=>{let t=/^(?:https?\:\/\/)github.com\/[A-Za-z0-9-]+\/[A-Za-z0-9-]+\/?/i,s=/^[A-Za-z0-9-]+\/[A-Za-z0-9-]+$/i;if(t.test(e))return I(e,"/");if(s.test(e))return`https://github.com/${e}`;throw new f("Repo must be a valid HTTP GitHub repo URL or a user/repo string.")}).option("-m, --max <count>","maximum number of repos to scan/return, eg. 300",e=>{let t=parseInt(e,10);if(isNaN(t))throw new f("Count must be a number.");return t}).addOption(new R("-s, --sort <direction>","optionally sort by stars").choices(["asc","desc"]).default("desc")).option("--no-sort","disable default sorting by stars").action(async(e,t)=>{console.log(`Fetching dependents for ${e} ...`);let s=t.max?parseInt(t.max):void 0,r;t.sort==="desc"?r="desc":t.sort==="asc"?r="asc":r=void 0,(await h(`${e}/network/dependents`,s,r)).forEach(n=>{console.log(`${n.getUrl()} ${n.stars}`)})});u.parse();
//# sourceMappingURL=cli.js.map